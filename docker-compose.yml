version: '3.8'

# =============================================================================
# AVM Financial Tracker - Docker Compose Configuration
# =============================================================================
# Development and production environments with all necessary services
# =============================================================================

services:
  # =============================================================================
  # MAIN APPLICATION
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-runner}
    container_name: avm-financial-tracker
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - GOOGLE_SHEETS_ID=${GOOGLE_SHEETS_ID}
      - GOOGLE_SERVICE_ACCOUNT_EMAIL=${GOOGLE_SERVICE_ACCOUNT_EMAIL}
      - GOOGLE_PRIVATE_KEY=${GOOGLE_PRIVATE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
    volumes:
      - ./public:/app/public:ro
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - avm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # DATABASE
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: avm-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-avm_financial_tracker}
      - POSTGRES_USER=${POSTGRES_USER:-avm_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-avm_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - avm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-avm_user} -d ${POSTGRES_DB:-avm_financial_tracker}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # REDIS CACHE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: avm-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-avm_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - avm-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # =============================================================================
  # NGINX REVERSE PROXY
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: avm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - avm-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: avm-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - avm-network

  grafana:
    image: grafana/grafana:latest
    container_name: avm-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - avm-network

  # =============================================================================
  # DEVELOPMENT SERVICES
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: avm-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - avm-network
    profiles:
      - dev

  # =============================================================================
  # TESTING SERVICES
  # =============================================================================
  test-db:
    image: postgres:15-alpine
    container_name: avm-test-postgres
    environment:
      - POSTGRES_DB=avm_financial_tracker_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    ports:
      - "5433:5432"
    networks:
      - avm-network
    profiles:
      - test

  test-redis:
    image: redis:7-alpine
    container_name: avm-test-redis
    command: redis-server --appendonly no
    ports:
      - "6380:6379"
    networks:
      - avm-network
    profiles:
      - test

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  avm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# CONFIGURATION
# =============================================================================
# To use this configuration:
#
# 1. Development:
#    docker-compose --profile dev up -d
#
# 2. Production:
#    docker-compose up -d
#
# 3. Testing:
#    docker-compose --profile test up -d
#
# 4. All services:
#    docker-compose --profile dev --profile test up -d
#
# =============================================================================
